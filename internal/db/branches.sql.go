// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: branches.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createBranch = `-- name: CreateBranch :one
INSERT INTO branches (name, location, organization_id)
    VALUES ($1, $2, $3) RETURNING id, name, location, organization_id
`

type CreateBranchParams struct {
	Name           string       `json:"name"`
	Location       pgtype.Point `json:"location"`
	OrganizationID int64        `json:"organization_id"`
}

func (q *Queries) CreateBranch(ctx context.Context, arg CreateBranchParams) (Branch, error) {
	row := q.db.QueryRow(ctx, createBranch, arg.Name, arg.Location, arg.OrganizationID)
	var i Branch
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Location,
		&i.OrganizationID,
	)
	return i, err
}

const deleteBranch = `-- name: DeleteBranch :exec
DELETE FROM branches
WHERE id = $1
`

func (q *Queries) DeleteBranch(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteBranch, id)
	return err
}

const getBranch = `-- name: GetBranch :one
SELECT id, name, location, organization_id FROM branches WHERE id = $1
`

func (q *Queries) GetBranch(ctx context.Context, id int64) (Branch, error) {
	row := q.db.QueryRow(ctx, getBranch, id)
	var i Branch
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Location,
		&i.OrganizationID,
	)
	return i, err
}

const listBranches = `-- name: ListBranches :many
SELECT id, name, location, organization_id FROM branches
`

func (q *Queries) ListBranches(ctx context.Context) ([]Branch, error) {
	rows, err := q.db.Query(ctx, listBranches)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Branch
	for rows.Next() {
		var i Branch
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Location,
			&i.OrganizationID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBranch = `-- name: UpdateBranch :one
UPDATE branches
SET name = $2, location = $3, organization_id = $4
WHERE id = $1
RETURNING id, name, location, organization_id
`

type UpdateBranchParams struct {
	ID             int64        `json:"id"`
	Name           string       `json:"name"`
	Location       pgtype.Point `json:"location"`
	OrganizationID int64        `json:"organization_id"`
}

func (q *Queries) UpdateBranch(ctx context.Context, arg UpdateBranchParams) (Branch, error) {
	row := q.db.QueryRow(ctx, updateBranch,
		arg.ID,
		arg.Name,
		arg.Location,
		arg.OrganizationID,
	)
	var i Branch
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Location,
		&i.OrganizationID,
	)
	return i, err
}
