// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: user_roles.sql

package db

import (
	"context"
)

const createUserRole = `-- name: CreateUserRole :one
INSERT INTO user_roles (role_id, user_id)
VALUES ($1, $2) RETURNING id, role_id, user_id
`

type CreateUserRoleParams struct {
	RoleID int32 `json:"role_id"`
	UserID int32 `json:"user_id"`
}

func (q *Queries) CreateUserRole(ctx context.Context, arg CreateUserRoleParams) (UserRole, error) {
	row := q.db.QueryRow(ctx, createUserRole, arg.RoleID, arg.UserID)
	var i UserRole
	err := row.Scan(&i.ID, &i.RoleID, &i.UserID)
	return i, err
}

const deleteUserRole = `-- name: DeleteUserRole :exec
DELETE FROM user_roles
WHERE id = $1
`

func (q *Queries) DeleteUserRole(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteUserRole, id)
	return err
}

const getUserRoles = `-- name: GetUserRoles :many
SELECT id, role_id, user_id FROM user_roles WHERE user_id = $1
`

func (q *Queries) GetUserRoles(ctx context.Context, userID int32) ([]UserRole, error) {
	rows, err := q.db.Query(ctx, getUserRoles, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UserRole
	for rows.Next() {
		var i UserRole
		if err := rows.Scan(&i.ID, &i.RoleID, &i.UserID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUsersByRole = `-- name: GetUsersByRole :many
SELECT id, role_id, user_id FROM user_roles WHERE role_id = $1
`

func (q *Queries) GetUsersByRole(ctx context.Context, roleID int32) ([]UserRole, error) {
	rows, err := q.db.Query(ctx, getUsersByRole, roleID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UserRole
	for rows.Next() {
		var i UserRole
		if err := rows.Scan(&i.ID, &i.RoleID, &i.UserID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUserRoles = `-- name: ListUserRoles :many
SELECT id, role_id, user_id FROM user_roles
`

func (q *Queries) ListUserRoles(ctx context.Context) ([]UserRole, error) {
	rows, err := q.db.Query(ctx, listUserRoles)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UserRole
	for rows.Next() {
		var i UserRole
		if err := rows.Scan(&i.ID, &i.RoleID, &i.UserID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUserRole = `-- name: UpdateUserRole :exec
UPDATE user_roles
SET role_id = $2
WHERE id = $1
`

type UpdateUserRoleParams struct {
	ID     int32 `json:"id"`
	RoleID int32 `json:"role_id"`
}

func (q *Queries) UpdateUserRole(ctx context.Context, arg UpdateUserRoleParams) error {
	_, err := q.db.Exec(ctx, updateUserRole, arg.ID, arg.RoleID)
	return err
}
