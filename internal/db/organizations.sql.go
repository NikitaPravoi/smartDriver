// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: organizations.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const checkOrganizationExists = `-- name: CheckOrganizationExists :one
SELECT EXISTS(
    SELECT 1 FROM organizations WHERE id = $1
) AS exists
`

// Query to check organization existence before operations
func (q *Queries) CheckOrganizationExists(ctx context.Context, id int64) (bool, error) {
	row := q.db.QueryRow(ctx, checkOrganizationExists, id)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const createOrganization = `-- name: CreateOrganization :one
INSERT INTO organizations (name, iiko_api_token)
    VALUES ($1, $2) RETURNING id, name, balance, iiko_api_token
`

type CreateOrganizationParams struct {
	Name         string `json:"name"`
	IikoApiToken string `json:"iiko_api_token"`
}

func (q *Queries) CreateOrganization(ctx context.Context, arg CreateOrganizationParams) (Organization, error) {
	row := q.db.QueryRow(ctx, createOrganization, arg.Name, arg.IikoApiToken)
	var i Organization
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Balance,
		&i.IikoApiToken,
	)
	return i, err
}

const deleteOrganization = `-- name: DeleteOrganization :exec
DELETE FROM organizations
WHERE id = $1
`

func (q *Queries) DeleteOrganization(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteOrganization, id)
	return err
}

const deleteOrganizationBranches = `-- name: DeleteOrganizationBranches :exec
DELETE FROM branches
WHERE organization_id = $1
`

func (q *Queries) DeleteOrganizationBranches(ctx context.Context, organizationID int64) error {
	_, err := q.db.Exec(ctx, deleteOrganizationBranches, organizationID)
	return err
}

const deleteOrganizationUsers = `-- name: DeleteOrganizationUsers :exec
DELETE FROM users
WHERE organization_id = $1
`

func (q *Queries) DeleteOrganizationUsers(ctx context.Context, organizationID int64) error {
	_, err := q.db.Exec(ctx, deleteOrganizationUsers, organizationID)
	return err
}

const getOrganization = `-- name: GetOrganization :one
SELECT id, name, balance, iiko_api_token FROM organizations WHERE id = $1
`

func (q *Queries) GetOrganization(ctx context.Context, id int64) (Organization, error) {
	row := q.db.QueryRow(ctx, getOrganization, id)
	var i Organization
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Balance,
		&i.IikoApiToken,
	)
	return i, err
}

const getOrganizationsApiTokens = `-- name: GetOrganizationsApiTokens :many
SELECT iiko_api_token FROM organizations WHERE balance > 0
`

func (q *Queries) GetOrganizationsApiTokens(ctx context.Context) ([]string, error) {
	rows, err := q.db.Query(ctx, getOrganizationsApiTokens)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var iiko_api_token string
		if err := rows.Scan(&iiko_api_token); err != nil {
			return nil, err
		}
		items = append(items, iiko_api_token)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listOrganizations = `-- name: ListOrganizations :many
SELECT id, name, balance, iiko_api_token FROM organizations
`

func (q *Queries) ListOrganizations(ctx context.Context) ([]Organization, error) {
	rows, err := q.db.Query(ctx, listOrganizations)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Organization
	for rows.Next() {
		var i Organization
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Balance,
			&i.IikoApiToken,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOrganization = `-- name: UpdateOrganization :one
UPDATE organizations
SET name = $2, balance = $3, iiko_api_token = $4
WHERE id = $1
RETURNING id, name, balance, iiko_api_token
`

type UpdateOrganizationParams struct {
	ID           int64          `json:"id"`
	Name         string         `json:"name"`
	Balance      pgtype.Numeric `json:"balance"`
	IikoApiToken string         `json:"iiko_api_token"`
}

func (q *Queries) UpdateOrganization(ctx context.Context, arg UpdateOrganizationParams) (Organization, error) {
	row := q.db.QueryRow(ctx, updateOrganization,
		arg.ID,
		arg.Name,
		arg.Balance,
		arg.IikoApiToken,
	)
	var i Organization
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Balance,
		&i.IikoApiToken,
	)
	return i, err
}
