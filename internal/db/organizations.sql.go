// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: organizations.sql

package db

import (
	"context"
)

const createOrganization = `-- name: CreateOrganization :one
INSERT INTO organizations (name, balance, iiko_id)
    VALUES ($1, $2, $3) RETURNING id, name, balance, iiko_id
`

type CreateOrganizationParams struct {
	Name    string  `json:"name"`
	Balance float32 `json:"balance"`
	IikoID  string  `json:"iiko_id"`
}

func (q *Queries) CreateOrganization(ctx context.Context, arg CreateOrganizationParams) (Organization, error) {
	row := q.db.QueryRow(ctx, createOrganization, arg.Name, arg.Balance, arg.IikoID)
	var i Organization
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Balance,
		&i.IikoID,
	)
	return i, err
}

const deleteOrganization = `-- name: DeleteOrganization :exec
DELETE FROM organizations
WHERE id = $1
`

func (q *Queries) DeleteOrganization(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteOrganization, id)
	return err
}

const getOrganization = `-- name: GetOrganization :one
SELECT id, name, balance, iiko_id FROM organizations WHERE id = $1
`

func (q *Queries) GetOrganization(ctx context.Context, id int32) (Organization, error) {
	row := q.db.QueryRow(ctx, getOrganization, id)
	var i Organization
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Balance,
		&i.IikoID,
	)
	return i, err
}

const listOrganizations = `-- name: ListOrganizations :many
SELECT id, name, balance, iiko_id FROM organizations
`

func (q *Queries) ListOrganizations(ctx context.Context) ([]Organization, error) {
	rows, err := q.db.Query(ctx, listOrganizations)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Organization
	for rows.Next() {
		var i Organization
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Balance,
			&i.IikoID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOrganization = `-- name: UpdateOrganization :exec
UPDATE organizations
SET name = $2, balance = $3, iiko_id = $4
WHERE id = $1
`

type UpdateOrganizationParams struct {
	ID      int32   `json:"id"`
	Name    string  `json:"name"`
	Balance float32 `json:"balance"`
	IikoID  string  `json:"iiko_id"`
}

func (q *Queries) UpdateOrganization(ctx context.Context, arg UpdateOrganizationParams) error {
	_, err := q.db.Exec(ctx, updateOrganization,
		arg.ID,
		arg.Name,
		arg.Balance,
		arg.IikoID,
	)
	return err
}
