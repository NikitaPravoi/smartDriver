// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: organization_plans.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createOrganizationPlan = `-- name: CreateOrganizationPlan :one
INSERT INTO organization_plans (organization_id, plan_id, start_date, end_date)
    VALUES ($1, $2, $3, $4) RETURNING id, organization_id, plan_id, start_date, end_date
`

type CreateOrganizationPlanParams struct {
	OrganizationID int32       `json:"organization_id"`
	PlanID         int32       `json:"plan_id"`
	StartDate      pgtype.Date `json:"start_date"`
	EndDate        pgtype.Date `json:"end_date"`
}

func (q *Queries) CreateOrganizationPlan(ctx context.Context, arg CreateOrganizationPlanParams) (OrganizationPlan, error) {
	row := q.db.QueryRow(ctx, createOrganizationPlan,
		arg.OrganizationID,
		arg.PlanID,
		arg.StartDate,
		arg.EndDate,
	)
	var i OrganizationPlan
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.PlanID,
		&i.StartDate,
		&i.EndDate,
	)
	return i, err
}

const deleteOrganizationPlan = `-- name: DeleteOrganizationPlan :exec
DELETE FROM organization_plans
WHERE id = $1
`

func (q *Queries) DeleteOrganizationPlan(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteOrganizationPlan, id)
	return err
}

const getOrganizationPlan = `-- name: GetOrganizationPlan :one
SELECT id, organization_id, plan_id, start_date, end_date FROM organization_plans WHERE id = $1
`

func (q *Queries) GetOrganizationPlan(ctx context.Context, id int32) (OrganizationPlan, error) {
	row := q.db.QueryRow(ctx, getOrganizationPlan, id)
	var i OrganizationPlan
	err := row.Scan(
		&i.ID,
		&i.OrganizationID,
		&i.PlanID,
		&i.StartDate,
		&i.EndDate,
	)
	return i, err
}

const listOrganizationPlans = `-- name: ListOrganizationPlans :many
SELECT id, organization_id, plan_id, start_date, end_date FROM organization_plans
`

func (q *Queries) ListOrganizationPlans(ctx context.Context) ([]OrganizationPlan, error) {
	rows, err := q.db.Query(ctx, listOrganizationPlans)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []OrganizationPlan
	for rows.Next() {
		var i OrganizationPlan
		if err := rows.Scan(
			&i.ID,
			&i.OrganizationID,
			&i.PlanID,
			&i.StartDate,
			&i.EndDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOrganizationPlan = `-- name: UpdateOrganizationPlan :exec
UPDATE organization_plans
SET organization_id = $2, plan_id = $3, start_date = $4, end_date = $5
WHERE id = $1
`

type UpdateOrganizationPlanParams struct {
	ID             int32       `json:"id"`
	OrganizationID int32       `json:"organization_id"`
	PlanID         int32       `json:"plan_id"`
	StartDate      pgtype.Date `json:"start_date"`
	EndDate        pgtype.Date `json:"end_date"`
}

func (q *Queries) UpdateOrganizationPlan(ctx context.Context, arg UpdateOrganizationPlanParams) error {
	_, err := q.db.Exec(ctx, updateOrganizationPlan,
		arg.ID,
		arg.OrganizationID,
		arg.PlanID,
		arg.StartDate,
		arg.EndDate,
	)
	return err
}
