// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: plan_features.sql

package db

import (
	"context"
)

const createPlanFeature = `-- name: CreatePlanFeature :one
INSERT INTO plan_features (plan_id, feature_name)
    VALUES ($1, $2) RETURNING id, plan_id, feature_name
`

type CreatePlanFeatureParams struct {
	PlanID      int64  `json:"plan_id"`
	FeatureName string `json:"feature_name"`
}

func (q *Queries) CreatePlanFeature(ctx context.Context, arg CreatePlanFeatureParams) (PlanFeature, error) {
	row := q.db.QueryRow(ctx, createPlanFeature, arg.PlanID, arg.FeatureName)
	var i PlanFeature
	err := row.Scan(&i.ID, &i.PlanID, &i.FeatureName)
	return i, err
}

const deletePlanFeature = `-- name: DeletePlanFeature :exec
DELETE FROM plan_features
WHERE id = $1
`

func (q *Queries) DeletePlanFeature(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deletePlanFeature, id)
	return err
}

const getPlanFeature = `-- name: GetPlanFeature :one
SELECT id, plan_id, feature_name FROM plan_features WHERE id = $1
`

func (q *Queries) GetPlanFeature(ctx context.Context, id int64) (PlanFeature, error) {
	row := q.db.QueryRow(ctx, getPlanFeature, id)
	var i PlanFeature
	err := row.Scan(&i.ID, &i.PlanID, &i.FeatureName)
	return i, err
}

const listPlanFeatures = `-- name: ListPlanFeatures :many
SELECT id, plan_id, feature_name FROM plan_features
`

func (q *Queries) ListPlanFeatures(ctx context.Context) ([]PlanFeature, error) {
	rows, err := q.db.Query(ctx, listPlanFeatures)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PlanFeature
	for rows.Next() {
		var i PlanFeature
		if err := rows.Scan(&i.ID, &i.PlanID, &i.FeatureName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePlanFeature = `-- name: UpdatePlanFeature :one
UPDATE plan_features
SET plan_id = $2, feature_name = $3
WHERE id = $1
RETURNING id, plan_id, feature_name
`

type UpdatePlanFeatureParams struct {
	ID          int64  `json:"id"`
	PlanID      int64  `json:"plan_id"`
	FeatureName string `json:"feature_name"`
}

func (q *Queries) UpdatePlanFeature(ctx context.Context, arg UpdatePlanFeatureParams) (PlanFeature, error) {
	row := q.db.QueryRow(ctx, updatePlanFeature, arg.ID, arg.PlanID, arg.FeatureName)
	var i PlanFeature
	err := row.Scan(&i.ID, &i.PlanID, &i.FeatureName)
	return i, err
}
