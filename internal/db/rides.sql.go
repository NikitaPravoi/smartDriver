// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: rides.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const attachOrderToRide = `-- name: AttachOrderToRide :exec
INSERT INTO rides_to_orders (
    ride_id,
    order_id
) VALUES (
             $1, $2
         )
`

type AttachOrderToRideParams struct {
	RideID  int64 `json:"ride_id"`
	OrderID int64 `json:"order_id"`
}

func (q *Queries) AttachOrderToRide(ctx context.Context, arg AttachOrderToRideParams) error {
	_, err := q.db.Exec(ctx, attachOrderToRide, arg.RideID, arg.OrderID)
	return err
}

const completeRide = `-- name: CompleteRide :exec
UPDATE rides
SET ended_at = CURRENT_TIMESTAMP
WHERE id = $1
`

func (q *Queries) CompleteRide(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, completeRide, id)
	return err
}

const createRide = `-- name: CreateRide :one
INSERT INTO rides (
    branch_id,
    created_at
) VALUES (
             $1,
             CURRENT_TIMESTAMP
         )
RETURNING id, branch_id, created_at, ended_at
`

func (q *Queries) CreateRide(ctx context.Context, branchID int64) (Ride, error) {
	row := q.db.QueryRow(ctx, createRide, branchID)
	var i Ride
	err := row.Scan(
		&i.ID,
		&i.BranchID,
		&i.CreatedAt,
		&i.EndedAt,
	)
	return i, err
}

const detachAllOrdersFromRide = `-- name: DetachAllOrdersFromRide :exec
DELETE FROM rides_to_orders
WHERE ride_id = $1
`

func (q *Queries) DetachAllOrdersFromRide(ctx context.Context, rideID int64) error {
	_, err := q.db.Exec(ctx, detachAllOrdersFromRide, rideID)
	return err
}

const getActiveRides = `-- name: GetActiveRides :many
SELECT r.id, r.branch_id, r.created_at, r.ended_at,
       COUNT(rto.order_id) as order_count
FROM rides r
         LEFT JOIN rides_to_orders rto ON r.id = rto.ride_id
WHERE r.ended_at IS NULL
GROUP BY r.id
ORDER BY r.created_at DESC
`

type GetActiveRidesRow struct {
	ID         int64            `json:"id"`
	BranchID   int64            `json:"branch_id"`
	CreatedAt  pgtype.Timestamp `json:"created_at"`
	EndedAt    pgtype.Timestamp `json:"ended_at"`
	OrderCount int64            `json:"order_count"`
}

func (q *Queries) GetActiveRides(ctx context.Context) ([]GetActiveRidesRow, error) {
	rows, err := q.db.Query(ctx, getActiveRides)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetActiveRidesRow
	for rows.Next() {
		var i GetActiveRidesRow
		if err := rows.Scan(
			&i.ID,
			&i.BranchID,
			&i.CreatedAt,
			&i.EndedAt,
			&i.OrderCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOrdersByRideID = `-- name: GetOrdersByRideID :many
SELECT o.id, o.customer_name, o.phone, o.city, o.street, o.apartment, o.floor, o.doorphone, o.building, o.entrance, o.comment, o.cost, o.status, o.location, o.created_at, o.external_id
FROM orders o
         JOIN rides_to_orders rto ON rto.order_id = o.id
WHERE rto.ride_id = $1
ORDER BY o.created_at
`

func (q *Queries) GetOrdersByRideID(ctx context.Context, rideID int64) ([]Order, error) {
	rows, err := q.db.Query(ctx, getOrdersByRideID, rideID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Order
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.ID,
			&i.CustomerName,
			&i.Phone,
			&i.City,
			&i.Street,
			&i.Apartment,
			&i.Floor,
			&i.Doorphone,
			&i.Building,
			&i.Entrance,
			&i.Comment,
			&i.Cost,
			&i.Status,
			&i.Location,
			&i.CreatedAt,
			&i.ExternalID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRide = `-- name: GetRide :one
SELECT id, branch_id, created_at, ended_at FROM rides
WHERE id = $1
`

func (q *Queries) GetRide(ctx context.Context, id int64) (Ride, error) {
	row := q.db.QueryRow(ctx, getRide, id)
	var i Ride
	err := row.Scan(
		&i.ID,
		&i.BranchID,
		&i.CreatedAt,
		&i.EndedAt,
	)
	return i, err
}
