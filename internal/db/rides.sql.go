// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: rides.sql

package db

import (
	"context"
)

const createRide = `-- name: CreateRide :one
INSERT INTO rides (branch_id)
    VALUES ($1) RETURNING id, branch_id, created_at, ended_at
`

func (q *Queries) CreateRide(ctx context.Context, branchID int64) (Ride, error) {
	row := q.db.QueryRow(ctx, createRide, branchID)
	var i Ride
	err := row.Scan(
		&i.ID,
		&i.BranchID,
		&i.CreatedAt,
		&i.EndedAt,
	)
	return i, err
}

const deleteRide = `-- name: DeleteRide :exec
DELETE FROM rides
WHERE id = $1
`

func (q *Queries) DeleteRide(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteRide, id)
	return err
}

const getRide = `-- name: GetRide :one
SELECT id, branch_id, created_at, ended_at FROM rides WHERE id = $1
`

func (q *Queries) GetRide(ctx context.Context, id int64) (Ride, error) {
	row := q.db.QueryRow(ctx, getRide, id)
	var i Ride
	err := row.Scan(
		&i.ID,
		&i.BranchID,
		&i.CreatedAt,
		&i.EndedAt,
	)
	return i, err
}

const listRides = `-- name: ListRides :many
SELECT id, branch_id, created_at, ended_at FROM rides
`

func (q *Queries) ListRides(ctx context.Context) ([]Ride, error) {
	rows, err := q.db.Query(ctx, listRides)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Ride
	for rows.Next() {
		var i Ride
		if err := rows.Scan(
			&i.ID,
			&i.BranchID,
			&i.CreatedAt,
			&i.EndedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
