// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: users.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (login, password, name, surname, patronymic, organization_id)
VALUES ($1, $2, $3, $4, $5, $6) RETURNING id, login, password, name, surname, patronymic, organization_id, created_at, updated_at
`

type CreateUserParams struct {
	Login          string      `json:"login"`
	Password       string      `json:"password"`
	Name           pgtype.Text `json:"name"`
	Surname        pgtype.Text `json:"surname"`
	Patronymic     pgtype.Text `json:"patronymic"`
	OrganizationID int64       `json:"organization_id"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Login,
		arg.Password,
		arg.Name,
		arg.Surname,
		arg.Patronymic,
		arg.OrganizationID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Login,
		&i.Password,
		&i.Name,
		&i.Surname,
		&i.Patronymic,
		&i.OrganizationID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getOrganizationUsers = `-- name: GetOrganizationUsers :many
SELECT id, login, password, name, surname, patronymic, organization_id, created_at, updated_at FROM users WHERE organization_id = $1
`

func (q *Queries) GetOrganizationUsers(ctx context.Context, organizationID int64) ([]User, error) {
	rows, err := q.db.Query(ctx, getOrganizationUsers, organizationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Login,
			&i.Password,
			&i.Name,
			&i.Surname,
			&i.Patronymic,
			&i.OrganizationID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUser = `-- name: GetUser :one
SELECT id, login, password, name, surname, patronymic, organization_id, created_at, updated_at FROM users WHERE id = $1
`

func (q *Queries) GetUser(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Login,
		&i.Password,
		&i.Name,
		&i.Surname,
		&i.Patronymic,
		&i.OrganizationID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserWithHisRoles = `-- name: GetUserWithHisRoles :one
SELECT u.id, u.login, r.name AS role_name
FROM users u
JOIN user_roles ur ON u.id = ur.user_id
JOIN roles r ON ur.role_id = r.id
WHERE u.id = $1
`

type GetUserWithHisRolesRow struct {
	ID       int64  `json:"id"`
	Login    string `json:"login"`
	RoleName string `json:"role_name"`
}

func (q *Queries) GetUserWithHisRoles(ctx context.Context, id int64) (GetUserWithHisRolesRow, error) {
	row := q.db.QueryRow(ctx, getUserWithHisRoles, id)
	var i GetUserWithHisRolesRow
	err := row.Scan(&i.ID, &i.Login, &i.RoleName)
	return i, err
}

const getUserWithHisRolesByOrganization = `-- name: GetUserWithHisRolesByOrganization :one
SELECT u.id, u.login, r.name AS role_name
FROM users u
         JOIN user_roles ur ON u.id = ur.user_id
         JOIN roles r ON ur.role_id = r.id
WHERE u.organization_id = $1
`

type GetUserWithHisRolesByOrganizationRow struct {
	ID       int64  `json:"id"`
	Login    string `json:"login"`
	RoleName string `json:"role_name"`
}

func (q *Queries) GetUserWithHisRolesByOrganization(ctx context.Context, organizationID int64) (GetUserWithHisRolesByOrganizationRow, error) {
	row := q.db.QueryRow(ctx, getUserWithHisRolesByOrganization, organizationID)
	var i GetUserWithHisRolesByOrganizationRow
	err := row.Scan(&i.ID, &i.Login, &i.RoleName)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, login, password, name, surname, patronymic, organization_id, created_at, updated_at FROM users
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Login,
			&i.Password,
			&i.Name,
			&i.Surname,
			&i.Patronymic,
			&i.OrganizationID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users
SET name = $2, surname = $3, password = $4
WHERE id = $1
`

type UpdateUserParams struct {
	ID       int64       `json:"id"`
	Name     pgtype.Text `json:"name"`
	Surname  pgtype.Text `json:"surname"`
	Password string      `json:"password"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.Exec(ctx, updateUser,
		arg.ID,
		arg.Name,
		arg.Surname,
		arg.Password,
	)
	return err
}
