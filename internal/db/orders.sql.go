// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: orders.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createOrder = `-- name: CreateOrder :one
INSERT INTO orders (customer_name, city, street, apartment, floor, entrance, comment, cost, status, location, created_at)
    VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, POINT($10, $11), $12) RETURNING id, customer_name, city, street, apartment, floor, entrance, comment, cost, status, location, created_at
`

type CreateOrderParams struct {
	CustomerName string           `json:"customer_name"`
	City         *string          `json:"city"`
	Street       *string          `json:"street"`
	Apartment    *string          `json:"apartment"`
	Floor        *int32           `json:"floor"`
	Entrance     *int32           `json:"entrance"`
	Comment      *string          `json:"comment"`
	Cost         pgtype.Numeric   `json:"cost"`
	Status       *string          `json:"status"`
	Point        float64          `json:"point"`
	Point_2      float64          `json:"point_2"`
	CreatedAt    pgtype.Timestamp `json:"created_at"`
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) (Order, error) {
	row := q.db.QueryRow(ctx, createOrder,
		arg.CustomerName,
		arg.City,
		arg.Street,
		arg.Apartment,
		arg.Floor,
		arg.Entrance,
		arg.Comment,
		arg.Cost,
		arg.Status,
		arg.Point,
		arg.Point_2,
		arg.CreatedAt,
	)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.CustomerName,
		&i.City,
		&i.Street,
		&i.Apartment,
		&i.Floor,
		&i.Entrance,
		&i.Comment,
		&i.Cost,
		&i.Status,
		&i.Location,
		&i.CreatedAt,
	)
	return i, err
}

const getOrder = `-- name: GetOrder :one
SELECT id, customer_name, city, street, apartment, floor, entrance, comment, cost, status, location, created_at FROM orders WHERE id = $1
`

func (q *Queries) GetOrder(ctx context.Context, id int64) (Order, error) {
	row := q.db.QueryRow(ctx, getOrder, id)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.CustomerName,
		&i.City,
		&i.Street,
		&i.Apartment,
		&i.Floor,
		&i.Entrance,
		&i.Comment,
		&i.Cost,
		&i.Status,
		&i.Location,
		&i.CreatedAt,
	)
	return i, err
}

const listOrders = `-- name: ListOrders :many
SELECT id, customer_name, city, street, apartment, floor, entrance, comment, cost, status, location, created_at FROM orders
`

func (q *Queries) ListOrders(ctx context.Context) ([]Order, error) {
	rows, err := q.db.Query(ctx, listOrders)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Order
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.ID,
			&i.CustomerName,
			&i.City,
			&i.Street,
			&i.Apartment,
			&i.Floor,
			&i.Entrance,
			&i.Comment,
			&i.Cost,
			&i.Status,
			&i.Location,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOrder = `-- name: UpdateOrder :exec

DELETE FROM orders
WHERE id = $1
`

// UPDATE orders
// SET customer_name = $2, city = $4, street = $5, apartment = $6, floor = $7, entrance = $8, comment = $9, cost = $10, status = $11
// WHERE id = $1;
func (q *Queries) UpdateOrder(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, updateOrder, id)
	return err
}
