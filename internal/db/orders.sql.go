// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: orders.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createOrder = `-- name: CreateOrder :one
INSERT INTO orders (customer_name, customer_phone, city, street, apartment, floor, entrance, comment, cost, status, created_at)
    VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11) RETURNING id, customer_name, customer_phone, city, street, apartment, floor, entrance, comment, cost, status, created_at
`

type CreateOrderParams struct {
	CustomerName  string           `json:"customer_name"`
	CustomerPhone pgtype.Text      `json:"customer_phone"`
	City          pgtype.Text      `json:"city"`
	Street        pgtype.Text      `json:"street"`
	Apartment     pgtype.Text      `json:"apartment"`
	Floor         pgtype.Int4      `json:"floor"`
	Entrance      pgtype.Int4      `json:"entrance"`
	Comment       pgtype.Text      `json:"comment"`
	Cost          pgtype.Numeric   `json:"cost"`
	Status        pgtype.Int4      `json:"status"`
	CreatedAt     pgtype.Timestamp `json:"created_at"`
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) (Order, error) {
	row := q.db.QueryRow(ctx, createOrder,
		arg.CustomerName,
		arg.CustomerPhone,
		arg.City,
		arg.Street,
		arg.Apartment,
		arg.Floor,
		arg.Entrance,
		arg.Comment,
		arg.Cost,
		arg.Status,
		arg.CreatedAt,
	)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.CustomerName,
		&i.CustomerPhone,
		&i.City,
		&i.Street,
		&i.Apartment,
		&i.Floor,
		&i.Entrance,
		&i.Comment,
		&i.Cost,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const deleteOrder = `-- name: DeleteOrder :exec
DELETE FROM orders
WHERE id = $1
`

func (q *Queries) DeleteOrder(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteOrder, id)
	return err
}

const getOrder = `-- name: GetOrder :one
SELECT id, customer_name, customer_phone, city, street, apartment, floor, entrance, comment, cost, status, created_at FROM orders WHERE id = $1
`

func (q *Queries) GetOrder(ctx context.Context, id int64) (Order, error) {
	row := q.db.QueryRow(ctx, getOrder, id)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.CustomerName,
		&i.CustomerPhone,
		&i.City,
		&i.Street,
		&i.Apartment,
		&i.Floor,
		&i.Entrance,
		&i.Comment,
		&i.Cost,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const listOrders = `-- name: ListOrders :many
SELECT id, customer_name, customer_phone, city, street, apartment, floor, entrance, comment, cost, status, created_at FROM orders
`

func (q *Queries) ListOrders(ctx context.Context) ([]Order, error) {
	rows, err := q.db.Query(ctx, listOrders)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Order
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.ID,
			&i.CustomerName,
			&i.CustomerPhone,
			&i.City,
			&i.Street,
			&i.Apartment,
			&i.Floor,
			&i.Entrance,
			&i.Comment,
			&i.Cost,
			&i.Status,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOrder = `-- name: UpdateOrder :exec
UPDATE orders
SET customer_name = $2, customer_phone = $3, city = $4, street = $5, apartment = $6, floor = $7, entrance = $8, comment = $9, cost = $10, status = $11
WHERE id = $1
`

type UpdateOrderParams struct {
	ID            int64          `json:"id"`
	CustomerName  string         `json:"customer_name"`
	CustomerPhone pgtype.Text    `json:"customer_phone"`
	City          pgtype.Text    `json:"city"`
	Street        pgtype.Text    `json:"street"`
	Apartment     pgtype.Text    `json:"apartment"`
	Floor         pgtype.Int4    `json:"floor"`
	Entrance      pgtype.Int4    `json:"entrance"`
	Comment       pgtype.Text    `json:"comment"`
	Cost          pgtype.Numeric `json:"cost"`
	Status        pgtype.Int4    `json:"status"`
}

func (q *Queries) UpdateOrder(ctx context.Context, arg UpdateOrderParams) error {
	_, err := q.db.Exec(ctx, updateOrder,
		arg.ID,
		arg.CustomerName,
		arg.CustomerPhone,
		arg.City,
		arg.Street,
		arg.Apartment,
		arg.Floor,
		arg.Entrance,
		arg.Comment,
		arg.Cost,
		arg.Status,
	)
	return err
}
