// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: rides_to_orders.sql

package db

import (
	"context"
)

const createRideToOrder = `-- name: CreateRideToOrder :one
INSERT INTO rides_to_orders (ride_id, order_id)
    VALUES ($1, $2) RETURNING id, ride_id, order_id
`

type CreateRideToOrderParams struct {
	RideID  int32 `json:"ride_id"`
	OrderID int32 `json:"order_id"`
}

func (q *Queries) CreateRideToOrder(ctx context.Context, arg CreateRideToOrderParams) (RidesToOrder, error) {
	row := q.db.QueryRow(ctx, createRideToOrder, arg.RideID, arg.OrderID)
	var i RidesToOrder
	err := row.Scan(&i.ID, &i.RideID, &i.OrderID)
	return i, err
}

const deleteRideToOrder = `-- name: DeleteRideToOrder :exec
DELETE FROM rides_to_orders
WHERE id = $1
`

func (q *Queries) DeleteRideToOrder(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteRideToOrder, id)
	return err
}

const getRideToOrder = `-- name: GetRideToOrder :one
SELECT id, ride_id, order_id FROM rides_to_orders WHERE id = $1
`

func (q *Queries) GetRideToOrder(ctx context.Context, id int32) (RidesToOrder, error) {
	row := q.db.QueryRow(ctx, getRideToOrder, id)
	var i RidesToOrder
	err := row.Scan(&i.ID, &i.RideID, &i.OrderID)
	return i, err
}

const listRidesToOrders = `-- name: ListRidesToOrders :many
SELECT id, ride_id, order_id FROM rides_to_orders
`

func (q *Queries) ListRidesToOrders(ctx context.Context) ([]RidesToOrder, error) {
	rows, err := q.db.Query(ctx, listRidesToOrders)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RidesToOrder
	for rows.Next() {
		var i RidesToOrder
		if err := rows.Scan(&i.ID, &i.RideID, &i.OrderID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateRideToOrder = `-- name: UpdateRideToOrder :exec
UPDATE rides_to_orders
SET ride_id = $2, order_id = $3
WHERE id = $1
`

type UpdateRideToOrderParams struct {
	ID      int32 `json:"id"`
	RideID  int32 `json:"ride_id"`
	OrderID int32 `json:"order_id"`
}

func (q *Queries) UpdateRideToOrder(ctx context.Context, arg UpdateRideToOrderParams) error {
	_, err := q.db.Exec(ctx, updateRideToOrder, arg.ID, arg.RideID, arg.OrderID)
	return err
}
