// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: plans.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createPlan = `-- name: CreatePlan :one
INSERT INTO plans (name, cost, employee_limit)
    VALUES ($1, $2, $3) RETURNING id, name, cost, employee_limit
`

type CreatePlanParams struct {
	Name          string         `json:"name"`
	Cost          pgtype.Numeric `json:"cost"`
	EmployeeLimit int32          `json:"employee_limit"`
}

func (q *Queries) CreatePlan(ctx context.Context, arg CreatePlanParams) (Plan, error) {
	row := q.db.QueryRow(ctx, createPlan, arg.Name, arg.Cost, arg.EmployeeLimit)
	var i Plan
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Cost,
		&i.EmployeeLimit,
	)
	return i, err
}

const deletePlan = `-- name: DeletePlan :exec
DELETE FROM plans
WHERE id = $1
`

func (q *Queries) DeletePlan(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deletePlan, id)
	return err
}

const getPlan = `-- name: GetPlan :one
SELECT id, name, cost, employee_limit FROM plans WHERE id = $1
`

func (q *Queries) GetPlan(ctx context.Context, id int32) (Plan, error) {
	row := q.db.QueryRow(ctx, getPlan, id)
	var i Plan
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Cost,
		&i.EmployeeLimit,
	)
	return i, err
}

const listPlans = `-- name: ListPlans :many
SELECT id, name, cost, employee_limit FROM plans
`

func (q *Queries) ListPlans(ctx context.Context) ([]Plan, error) {
	rows, err := q.db.Query(ctx, listPlans)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Plan
	for rows.Next() {
		var i Plan
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Cost,
			&i.EmployeeLimit,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePlan = `-- name: UpdatePlan :exec
UPDATE plans
SET name = $2, cost = $3, employee_limit = $4
WHERE id = $1
`

type UpdatePlanParams struct {
	ID            int32          `json:"id"`
	Name          string         `json:"name"`
	Cost          pgtype.Numeric `json:"cost"`
	EmployeeLimit int32          `json:"employee_limit"`
}

func (q *Queries) UpdatePlan(ctx context.Context, arg UpdatePlanParams) error {
	_, err := q.db.Exec(ctx, updatePlan,
		arg.ID,
		arg.Name,
		arg.Cost,
		arg.EmployeeLimit,
	)
	return err
}
