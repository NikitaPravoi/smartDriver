// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: session.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createSession = `-- name: CreateSession :one
INSERT INTO sessions (
    user_id,
    session_token,
    refresh_token,
    created_at,
    expires_at
) VALUES (
             $1, $2, $3, $4, $5
         )
RETURNING id, user_id, session_token, refresh_token, created_at, expires_at
`

type CreateSessionParams struct {
	UserID       int64            `json:"user_id"`
	SessionToken string           `json:"session_token"`
	RefreshToken string           `json:"refresh_token"`
	CreatedAt    pgtype.Timestamp `json:"created_at"`
	ExpiresAt    pgtype.Timestamp `json:"expires_at"`
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (Session, error) {
	row := q.db.QueryRow(ctx, createSession,
		arg.UserID,
		arg.SessionToken,
		arg.RefreshToken,
		arg.CreatedAt,
		arg.ExpiresAt,
	)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.SessionToken,
		&i.RefreshToken,
		&i.CreatedAt,
		&i.ExpiresAt,
	)
	return i, err
}

const deleteExpiredSessions = `-- name: DeleteExpiredSessions :exec
DELETE FROM sessions
WHERE expires_at < CURRENT_TIMESTAMP
`

func (q *Queries) DeleteExpiredSessions(ctx context.Context) error {
	_, err := q.db.Exec(ctx, deleteExpiredSessions)
	return err
}

const deleteSession = `-- name: DeleteSession :exec
DELETE FROM sessions
WHERE id = $1
`

func (q *Queries) DeleteSession(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteSession, id)
	return err
}

const deleteSessionByToken = `-- name: DeleteSessionByToken :exec
DELETE FROM sessions
WHERE session_token = $1
`

func (q *Queries) DeleteSessionByToken(ctx context.Context, sessionToken string) error {
	_, err := q.db.Exec(ctx, deleteSessionByToken, sessionToken)
	return err
}

const getSessionByRefreshToken = `-- name: GetSessionByRefreshToken :one
SELECT id, user_id, session_token, refresh_token, created_at, expires_at FROM sessions
WHERE refresh_token = $1
`

func (q *Queries) GetSessionByRefreshToken(ctx context.Context, refreshToken string) (Session, error) {
	row := q.db.QueryRow(ctx, getSessionByRefreshToken, refreshToken)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.SessionToken,
		&i.RefreshToken,
		&i.CreatedAt,
		&i.ExpiresAt,
	)
	return i, err
}

const getSessionByToken = `-- name: GetSessionByToken :one
SELECT s.id, s.user_id, s.session_token, s.refresh_token, s.created_at, s.expires_at, u.id, u.login, u.password, u.name, u.surname, u.patronymic, u.organization_id, u.created_at, u.updated_at
FROM sessions s
         JOIN users u ON s.user_id = u.id
WHERE s.session_token = $1 AND s.expires_at > CURRENT_TIMESTAMP
`

type GetSessionByTokenRow struct {
	ID             int64            `json:"id"`
	UserID         int64            `json:"user_id"`
	SessionToken   string           `json:"session_token"`
	RefreshToken   string           `json:"refresh_token"`
	CreatedAt      pgtype.Timestamp `json:"created_at"`
	ExpiresAt      pgtype.Timestamp `json:"expires_at"`
	ID_2           int64            `json:"id_2"`
	Login          string           `json:"login"`
	Password       string           `json:"password"`
	Name           *string          `json:"name"`
	Surname        *string          `json:"surname"`
	Patronymic     *string          `json:"patronymic"`
	OrganizationID int64            `json:"organization_id"`
	CreatedAt_2    pgtype.Timestamp `json:"created_at_2"`
	UpdatedAt      pgtype.Timestamp `json:"updated_at"`
}

func (q *Queries) GetSessionByToken(ctx context.Context, sessionToken string) (GetSessionByTokenRow, error) {
	row := q.db.QueryRow(ctx, getSessionByToken, sessionToken)
	var i GetSessionByTokenRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.SessionToken,
		&i.RefreshToken,
		&i.CreatedAt,
		&i.ExpiresAt,
		&i.ID_2,
		&i.Login,
		&i.Password,
		&i.Name,
		&i.Surname,
		&i.Patronymic,
		&i.OrganizationID,
		&i.CreatedAt_2,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByLogin = `-- name: GetUserByLogin :one
SELECT id, login, password, name, surname, patronymic, organization_id, created_at, updated_at FROM users
WHERE login = $1
`

func (q *Queries) GetUserByLogin(ctx context.Context, login string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByLogin, login)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Login,
		&i.Password,
		&i.Name,
		&i.Surname,
		&i.Patronymic,
		&i.OrganizationID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserSessions = `-- name: GetUserSessions :many
SELECT id, user_id, session_token, refresh_token, created_at, expires_at FROM sessions
WHERE user_id = $1
ORDER BY created_at DESC
`

func (q *Queries) GetUserSessions(ctx context.Context, userID int64) ([]Session, error) {
	rows, err := q.db.Query(ctx, getUserSessions, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Session
	for rows.Next() {
		var i Session
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.SessionToken,
			&i.RefreshToken,
			&i.CreatedAt,
			&i.ExpiresAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSession = `-- name: UpdateSession :one
UPDATE sessions
SET
    session_token = $2,
    refresh_token = $3,
    expires_at = $4
WHERE id = $1
RETURNING id, user_id, session_token, refresh_token, created_at, expires_at
`

type UpdateSessionParams struct {
	ID           int64            `json:"id"`
	SessionToken string           `json:"session_token"`
	RefreshToken string           `json:"refresh_token"`
	ExpiresAt    pgtype.Timestamp `json:"expires_at"`
}

func (q *Queries) UpdateSession(ctx context.Context, arg UpdateSessionParams) (Session, error) {
	row := q.db.QueryRow(ctx, updateSession,
		arg.ID,
		arg.SessionToken,
		arg.RefreshToken,
		arg.ExpiresAt,
	)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.SessionToken,
		&i.RefreshToken,
		&i.CreatedAt,
		&i.ExpiresAt,
	)
	return i, err
}
