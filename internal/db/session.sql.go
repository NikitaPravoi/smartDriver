// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: session.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createSession = `-- name: CreateSession :one
INSERT INTO sessions (user_id, session_token, refresh_token, created_at, expires_at)
VALUES ($1, $2, $3, $4, $5) RETURNING id, user_id, session_token, refresh_token, created_at, expires_at
`

type CreateSessionParams struct {
	UserID       int32            `json:"user_id"`
	SessionToken string           `json:"session_token"`
	RefreshToken string           `json:"refresh_token"`
	CreatedAt    pgtype.Timestamp `json:"created_at"`
	ExpiresAt    pgtype.Timestamp `json:"expires_at"`
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (Session, error) {
	row := q.db.QueryRow(ctx, createSession,
		arg.UserID,
		arg.SessionToken,
		arg.RefreshToken,
		arg.CreatedAt,
		arg.ExpiresAt,
	)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.SessionToken,
		&i.RefreshToken,
		&i.CreatedAt,
		&i.ExpiresAt,
	)
	return i, err
}

const deleteSession = `-- name: DeleteSession :exec
DELETE FROM sessions
WHERE id = $1
`

func (q *Queries) DeleteSession(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteSession, id)
	return err
}

const deleteSessionByToken = `-- name: DeleteSessionByToken :exec
DELETE FROM sessions
WHERE session_token = $1
`

func (q *Queries) DeleteSessionByToken(ctx context.Context, sessionToken string) error {
	_, err := q.db.Exec(ctx, deleteSessionByToken, sessionToken)
	return err
}

const getSession = `-- name: GetSession :one
SELECT id, user_id, session_token, refresh_token, created_at, expires_at FROM sessions WHERE id = $1
`

func (q *Queries) GetSession(ctx context.Context, id int32) (Session, error) {
	row := q.db.QueryRow(ctx, getSession, id)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.SessionToken,
		&i.RefreshToken,
		&i.CreatedAt,
		&i.ExpiresAt,
	)
	return i, err
}

const getSessionByToken = `-- name: GetSessionByToken :one
SELECT id, user_id, session_token, refresh_token, created_at, expires_at FROM sessions WHERE session_token = $1
`

func (q *Queries) GetSessionByToken(ctx context.Context, sessionToken string) (Session, error) {
	row := q.db.QueryRow(ctx, getSessionByToken, sessionToken)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.SessionToken,
		&i.RefreshToken,
		&i.CreatedAt,
		&i.ExpiresAt,
	)
	return i, err
}

const listSessions = `-- name: ListSessions :many
SELECT id, user_id, session_token, refresh_token, created_at, expires_at FROM sessions
`

func (q *Queries) ListSessions(ctx context.Context) ([]Session, error) {
	rows, err := q.db.Query(ctx, listSessions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Session
	for rows.Next() {
		var i Session
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.SessionToken,
			&i.RefreshToken,
			&i.CreatedAt,
			&i.ExpiresAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSession = `-- name: UpdateSession :exec
UPDATE sessions
SET user_id = $2, session_token = $3, refresh_token = $4, created_at = $5, expires_at = $6
WHERE id = $1
`

type UpdateSessionParams struct {
	ID           int32            `json:"id"`
	UserID       int32            `json:"user_id"`
	SessionToken string           `json:"session_token"`
	RefreshToken string           `json:"refresh_token"`
	CreatedAt    pgtype.Timestamp `json:"created_at"`
	ExpiresAt    pgtype.Timestamp `json:"expires_at"`
}

func (q *Queries) UpdateSession(ctx context.Context, arg UpdateSessionParams) error {
	_, err := q.db.Exec(ctx, updateSession,
		arg.ID,
		arg.UserID,
		arg.SessionToken,
		arg.RefreshToken,
		arg.CreatedAt,
		arg.ExpiresAt,
	)
	return err
}

const updateSessionExpiry = `-- name: UpdateSessionExpiry :exec
UPDATE sessions
SET expires_at = CURRENT_TIMESTAMP
WHERE refresh_token = $1
`

func (q *Queries) UpdateSessionExpiry(ctx context.Context, refreshToken string) error {
	_, err := q.db.Exec(ctx, updateSessionExpiry, refreshToken)
	return err
}
